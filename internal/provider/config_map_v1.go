// Code generated by tools/gen/schema_openapi_v3.go; DO NOT EDIT
//
// This file contains the autogenerated implementation for the "config_map_v1" resource.
// You can override the behaviour of this resource using the corresponding _overrides.go file.
//
// This code was written by a robot on Apr 21, 2023 17:43:05 UTC.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Ensure provider defined types fully satisfy framework interfaces
var _ resource.Resource = &ConfigMap{}
var _ resource.ResourceWithImportState = &ConfigMap{}

type ConfigMap struct {
	Kind       string
	APIVersion string

	IgnoredFields []string

	clientGetter *KubernetesClientGetter
}

func NewConfigMap() resource.Resource {
	return &ConfigMap{
		Kind:       "ConfigMap",
		APIVersion: "v1",
		IgnoredFields: []string{
			"finalizers",
			"managedFields",
			"ownerReferences",
			"clusterName",
			"generateName",
			"deletionTimestamp",
			"deletionGracePeriodSeconds",
			"generation",
			"selfLink",
		},
	}
}

func (r *ConfigMap) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_config_map_v1"
}

func (r *ConfigMap) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	s := schema.Schema{
		MarkdownDescription: `ConfigMap holds configuration data for pods to consume.`,
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Resource Identifier",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"immutable": schema.BoolAttribute{
				MarkdownDescription: `Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.`,
				Optional:            true,
			},
			"kind": schema.StringAttribute{
				MarkdownDescription: `Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds`,
				Optional:            true,
			},
			"api_version": schema.StringAttribute{
				MarkdownDescription: `APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources`,
				Optional:            true,
			},
			"binary_data": schema.MapAttribute{
				MarkdownDescription: `BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.`,
				ElementType:         types.StringType,
				Optional:            true,
			},
			"data": schema.MapAttribute{
				MarkdownDescription: `Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.`,
				ElementType:         types.StringType,
				Optional:            true,
			},
		},
		Blocks: map[string]schema.Block{
			"metadata": schema.ListNestedBlock{
				MarkdownDescription: `ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.`,
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"resource_version": schema.StringAttribute{
							MarkdownDescription: `An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency`,
							Optional: true,
							Computed: true,
						},
						"annotations": schema.MapAttribute{
							MarkdownDescription: `Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations`,
							ElementType:         types.StringType,
							Optional:            true,
						},
						"labels": schema.MapAttribute{
							MarkdownDescription: `Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels`,
							ElementType:         types.StringType,
							Optional:            true,
						},
						"name": schema.StringAttribute{
							MarkdownDescription: `Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names`,
							Optional:            true,
						},
						"uid": schema.StringAttribute{
							MarkdownDescription: `UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids`,
							Optional: true,
							Computed: true,
						},
						"namespace": schema.StringAttribute{
							MarkdownDescription: `Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces`,
							Optional: true,
						},
						"creation_timestamp": schema.StringAttribute{
							MarkdownDescription: `CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata`,
							Optional: true,
							Computed: true,
						},
					},
					Blocks: map[string]schema.Block{},
				},
			},
		},
	}

	resp.Schema = r.overrideSchema(s)
}

func (r *ConfigMap) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	clientGetter, ok := req.ProviderData.(*KubernetesClientGetter)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *KubernetesClientGetter, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.clientGetter = clientGetter
}

func (r *ConfigMap) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	r.beforeCreate(ctx, req, resp)
	state, err := UniversalCreate(ctx, r.clientGetter, r.Kind, r.APIVersion, r.IgnoredFields, req)
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource", err.Error())
	}
	resp.State.Raw = state
	r.afterCreate(ctx, req, resp)
}

func (r *ConfigMap) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	r.beforeRead(ctx, req, resp)
	state, err := UniversalRead(ctx, r.clientGetter, r.Kind, r.APIVersion, r.IgnoredFields, req)
	if err != nil {
		resp.Diagnostics.AddError("Error reading resource", err.Error())
	}
	resp.State.Raw = state
	r.afterRead(ctx, req, resp)
}

func (r *ConfigMap) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	r.beforeUpdate(ctx, req, resp)
	state, err := UniversalUpdate(ctx, r.clientGetter, r.Kind, r.APIVersion, r.IgnoredFields, req)
	if err != nil {
		resp.Diagnostics.AddError("Error reading resource", err.Error())
	}
	resp.State.Raw = state
	r.afterUpdate(ctx, req, resp)
}

func (r *ConfigMap) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	r.beforeDelete(ctx, req, resp)
	err := UniversalDelete(ctx, r.clientGetter, r.Kind, r.APIVersion, req)
	if err != nil {
		resp.Diagnostics.AddError("Error reading resource", err.Error())
	}
	r.afterDelete(ctx, req, resp)
}

func (r *ConfigMap) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
