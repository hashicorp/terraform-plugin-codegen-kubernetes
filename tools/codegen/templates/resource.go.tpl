// Code generated by tools/gen/schema_openapi_v3.go; DO NOT EDIT 
// This code was written by a robot

package {{ .Package }}

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Ensure provider defined types fully satisfy framework interfaces
var _ resource.Resource = &{{ .ResourceName }}{}
var _ resource.ResourceWithImportState = &{{ .ResourceName }}{}

type {{ .ResourceName }} struct{}

func New{{ .ResourceName }}() resource.Resource {
	return &{{ .ResourceName }}{}
}

func (r *{{ .ResourceName }}) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "{{ .TerraformResourceName }}"
}

func (r *{{ .ResourceName }}) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: `{{ .ResourceBlock.Description }}`,
		Attributes:   map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Resource Identifier",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			{{- range $val := .ResourceBlock.Attributes }}
			"{{- $val.Name }}": schema.{{ $val.AttributeType }}{ 
				{{ $val }} 
			},
			{{- end }}
		},
		Blocks:  map[string]schema.Block{
			{{- range $val := .ResourceBlock.Blocks }}
			"{{- $val.Name }}": schema.ListNestedBlock{ 
				{{ $val }} 
			},
			{{- end }}
		},
	}
}

func (r *{{ .ResourceName }}) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

}

func (r *{{ .ResourceName }}) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

}

func (r *{{ .ResourceName }}) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

}

func (r *{{ .ResourceName }}) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	
}

func (r *{{ .ResourceName }}) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}